// <auto-generated />
using System;
using GeoGuardian.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace GeoGuardian.Migrations
{
    [DbContext(typeof(GeoGuardianContext))]
    [Migration("20250603051151_PrimeiraMigration")]
    partial class PrimeiraMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeoGuardian.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int>("CityId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("CityId1")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Complement")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("CountryId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("CountryId1")
                        .HasColumnType("NUMBER(10)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("NUMBER(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("NUMBER(9,6)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("StateId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("StateId1")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("StreetId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CityId1");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountryId1");

                    b.HasIndex("StateId");

                    b.HasIndex("StateId1");

                    b.HasIndex("StreetId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("RiskAreaId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("RiskAreaId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("GeoGuardian.Entities.AlertType", b =>
                {
                    b.Property<int>("AlertTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("AlertTypeId");

                    b.ToTable("AlertTypes");

                    b.HasData(
                        new
                        {
                            AlertTypeId = 1,
                            Name = "INFO"
                        },
                        new
                        {
                            AlertTypeId = 2,
                            Name = "WARNING"
                        },
                        new
                        {
                            AlertTypeId = 3,
                            Name = "CRITICAL"
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("StateId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "Rio Branco",
                            StateId = 1
                        },
                        new
                        {
                            CityId = 2,
                            Name = "Cruzeiro do Sul",
                            StateId = 1
                        },
                        new
                        {
                            CityId = 3,
                            Name = "Sena Madureira",
                            StateId = 1
                        },
                        new
                        {
                            CityId = 4,
                            Name = "Maceió",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 5,
                            Name = "Arapiraca",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 6,
                            Name = "Palmeira dos Índios",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 7,
                            Name = "Macapá",
                            StateId = 3
                        },
                        new
                        {
                            CityId = 8,
                            Name = "Santana",
                            StateId = 3
                        },
                        new
                        {
                            CityId = 9,
                            Name = "Laranjal do Jari",
                            StateId = 3
                        },
                        new
                        {
                            CityId = 10,
                            Name = "Manaus",
                            StateId = 4
                        },
                        new
                        {
                            CityId = 11,
                            Name = "Parintins",
                            StateId = 4
                        },
                        new
                        {
                            CityId = 12,
                            Name = "Itacoatiara",
                            StateId = 4
                        },
                        new
                        {
                            CityId = 13,
                            Name = "Salvador",
                            StateId = 5
                        },
                        new
                        {
                            CityId = 14,
                            Name = "Feira de Santana",
                            StateId = 5
                        },
                        new
                        {
                            CityId = 15,
                            Name = "Vitória da Conquista",
                            StateId = 5
                        },
                        new
                        {
                            CityId = 16,
                            Name = "Fortaleza",
                            StateId = 6
                        },
                        new
                        {
                            CityId = 17,
                            Name = "Juazeiro do Norte",
                            StateId = 6
                        },
                        new
                        {
                            CityId = 18,
                            Name = "Sobral",
                            StateId = 6
                        },
                        new
                        {
                            CityId = 19,
                            Name = "Brasília",
                            StateId = 7
                        },
                        new
                        {
                            CityId = 20,
                            Name = "Taguatinga",
                            StateId = 7
                        },
                        new
                        {
                            CityId = 21,
                            Name = "Ceilândia",
                            StateId = 7
                        },
                        new
                        {
                            CityId = 22,
                            Name = "Vitória",
                            StateId = 8
                        },
                        new
                        {
                            CityId = 23,
                            Name = "Vila Velha",
                            StateId = 8
                        },
                        new
                        {
                            CityId = 24,
                            Name = "Serra",
                            StateId = 8
                        },
                        new
                        {
                            CityId = 25,
                            Name = "Goiânia",
                            StateId = 9
                        },
                        new
                        {
                            CityId = 26,
                            Name = "Anápolis",
                            StateId = 9
                        },
                        new
                        {
                            CityId = 27,
                            Name = "Aparecida de Goiânia",
                            StateId = 9
                        },
                        new
                        {
                            CityId = 28,
                            Name = "São Luís",
                            StateId = 10
                        },
                        new
                        {
                            CityId = 29,
                            Name = "Imperatriz",
                            StateId = 10
                        },
                        new
                        {
                            CityId = 30,
                            Name = "Caxias",
                            StateId = 10
                        },
                        new
                        {
                            CityId = 31,
                            Name = "Cuiabá",
                            StateId = 11
                        },
                        new
                        {
                            CityId = 32,
                            Name = "Várzea Grande",
                            StateId = 11
                        },
                        new
                        {
                            CityId = 33,
                            Name = "Rondonópolis",
                            StateId = 11
                        },
                        new
                        {
                            CityId = 34,
                            Name = "Campo Grande",
                            StateId = 12
                        },
                        new
                        {
                            CityId = 35,
                            Name = "Dourados",
                            StateId = 12
                        },
                        new
                        {
                            CityId = 36,
                            Name = "Três Lagoas",
                            StateId = 12
                        },
                        new
                        {
                            CityId = 37,
                            Name = "Belo Horizonte",
                            StateId = 13
                        },
                        new
                        {
                            CityId = 38,
                            Name = "Uberlândia",
                            StateId = 13
                        },
                        new
                        {
                            CityId = 39,
                            Name = "Contagem",
                            StateId = 13
                        },
                        new
                        {
                            CityId = 40,
                            Name = "Belém",
                            StateId = 14
                        },
                        new
                        {
                            CityId = 41,
                            Name = "Santarém",
                            StateId = 14
                        },
                        new
                        {
                            CityId = 42,
                            Name = "Marabá",
                            StateId = 14
                        },
                        new
                        {
                            CityId = 43,
                            Name = "João Pessoa",
                            StateId = 15
                        },
                        new
                        {
                            CityId = 44,
                            Name = "Campina Grande",
                            StateId = 15
                        },
                        new
                        {
                            CityId = 45,
                            Name = "Patos",
                            StateId = 15
                        },
                        new
                        {
                            CityId = 46,
                            Name = "Curitiba",
                            StateId = 16
                        },
                        new
                        {
                            CityId = 47,
                            Name = "Londrina",
                            StateId = 16
                        },
                        new
                        {
                            CityId = 48,
                            Name = "Maringá",
                            StateId = 16
                        },
                        new
                        {
                            CityId = 49,
                            Name = "Recife",
                            StateId = 17
                        },
                        new
                        {
                            CityId = 50,
                            Name = "Olinda",
                            StateId = 17
                        },
                        new
                        {
                            CityId = 51,
                            Name = "Petrolina",
                            StateId = 17
                        },
                        new
                        {
                            CityId = 52,
                            Name = "Teresina",
                            StateId = 18
                        },
                        new
                        {
                            CityId = 53,
                            Name = "Parnaíba",
                            StateId = 18
                        },
                        new
                        {
                            CityId = 54,
                            Name = "Picos",
                            StateId = 18
                        },
                        new
                        {
                            CityId = 55,
                            Name = "Rio de Janeiro",
                            StateId = 19
                        },
                        new
                        {
                            CityId = 56,
                            Name = "Niterói",
                            StateId = 19
                        },
                        new
                        {
                            CityId = 57,
                            Name = "Nova Iguaçu",
                            StateId = 19
                        },
                        new
                        {
                            CityId = 58,
                            Name = "Natal",
                            StateId = 20
                        },
                        new
                        {
                            CityId = 59,
                            Name = "Mossoró",
                            StateId = 20
                        },
                        new
                        {
                            CityId = 60,
                            Name = "Parnamirim",
                            StateId = 20
                        },
                        new
                        {
                            CityId = 61,
                            Name = "Porto Alegre",
                            StateId = 21
                        },
                        new
                        {
                            CityId = 62,
                            Name = "Caxias do Sul",
                            StateId = 21
                        },
                        new
                        {
                            CityId = 63,
                            Name = "Pelotas",
                            StateId = 21
                        },
                        new
                        {
                            CityId = 64,
                            Name = "Porto Velho",
                            StateId = 22
                        },
                        new
                        {
                            CityId = 65,
                            Name = "Ji-Paraná",
                            StateId = 22
                        },
                        new
                        {
                            CityId = 66,
                            Name = "Ariquemes",
                            StateId = 22
                        },
                        new
                        {
                            CityId = 67,
                            Name = "Boa Vista",
                            StateId = 23
                        },
                        new
                        {
                            CityId = 68,
                            Name = "Rorainópolis",
                            StateId = 23
                        },
                        new
                        {
                            CityId = 69,
                            Name = "Caracaraí",
                            StateId = 23
                        },
                        new
                        {
                            CityId = 70,
                            Name = "Florianópolis",
                            StateId = 24
                        },
                        new
                        {
                            CityId = 71,
                            Name = "Joinville",
                            StateId = 24
                        },
                        new
                        {
                            CityId = 72,
                            Name = "Blumenau",
                            StateId = 24
                        },
                        new
                        {
                            CityId = 73,
                            Name = "São Paulo",
                            StateId = 25
                        },
                        new
                        {
                            CityId = 74,
                            Name = "Campinas",
                            StateId = 25
                        },
                        new
                        {
                            CityId = 75,
                            Name = "Santos",
                            StateId = 25
                        },
                        new
                        {
                            CityId = 76,
                            Name = "Aracaju",
                            StateId = 26
                        },
                        new
                        {
                            CityId = 77,
                            Name = "Nossa Senhora do Socorro",
                            StateId = 26
                        },
                        new
                        {
                            CityId = 78,
                            Name = "Itabaiana",
                            StateId = 26
                        },
                        new
                        {
                            CityId = 79,
                            Name = "Palmas",
                            StateId = 27
                        },
                        new
                        {
                            CityId = 80,
                            Name = "Araguaína",
                            StateId = 27
                        },
                        new
                        {
                            CityId = 81,
                            Name = "Gurupi",
                            StateId = 27
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Brasil"
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.Neighbourhood", b =>
                {
                    b.Property<int>("NeighbourhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NeighbourhoodId"));

                    b.Property<int>("CityId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("NeighbourhoodId");

                    b.HasIndex("CityId");

                    b.ToTable("Neighbourhood");
                });

            modelBuilder.Entity("GeoGuardian.Entities.RiskArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("RiskAreaTypeId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("StreetId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RiskAreaTypeId");

                    b.HasIndex("StreetId");

                    b.ToTable("RiskAreas");
                });

            modelBuilder.Entity("GeoGuardian.Entities.RiskAreaType", b =>
                {
                    b.Property<int>("RiskAreaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskAreaTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("RiskAreaTypeId");

                    b.ToTable("RiskAreaTypes");

                    b.HasData(
                        new
                        {
                            RiskAreaTypeId = 1,
                            Name = "FLOOD"
                        },
                        new
                        {
                            RiskAreaTypeId = 2,
                            Name = "LANDSLIDE"
                        },
                        new
                        {
                            RiskAreaTypeId = 3,
                            Name = "DAM_BREAK"
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RiskAreaId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("SensorModelId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("NVARCHAR2(36)");

                    b.HasKey("Id");

                    b.HasIndex("RiskAreaId");

                    b.HasIndex("SensorModelId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("GeoGuardian.Entities.SensorModel", b =>
                {
                    b.Property<int>("SensorModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorModelId"));

                    b.Property<string>("Maker")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("SensorModelId");

                    b.ToTable("SensorModels");

                    b.HasData(
                        new
                        {
                            SensorModelId = 1,
                            Maker = "Acme",
                            Name = "ULTRASONIC_WL-X100"
                        },
                        new
                        {
                            SensorModelId = 2,
                            Maker = "Acme",
                            Name = "SOILMOIST-S200"
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.SensorReading", b =>
                {
                    b.Property<long>("SensorReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SensorReadingId"));

                    b.Property<int>("SensorId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 3)
                        .HasColumnType("DECIMAL(18,3)");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("GeoGuardian.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            CountryId = 1,
                            Name = "Acre"
                        },
                        new
                        {
                            StateId = 2,
                            CountryId = 1,
                            Name = "Alagoas"
                        },
                        new
                        {
                            StateId = 3,
                            CountryId = 1,
                            Name = "Amapá"
                        },
                        new
                        {
                            StateId = 4,
                            CountryId = 1,
                            Name = "Amazonas"
                        },
                        new
                        {
                            StateId = 5,
                            CountryId = 1,
                            Name = "Bahia"
                        },
                        new
                        {
                            StateId = 6,
                            CountryId = 1,
                            Name = "Ceará"
                        },
                        new
                        {
                            StateId = 7,
                            CountryId = 1,
                            Name = "Distrito Federal"
                        },
                        new
                        {
                            StateId = 8,
                            CountryId = 1,
                            Name = "Espírito Santo"
                        },
                        new
                        {
                            StateId = 9,
                            CountryId = 1,
                            Name = "Goiás"
                        },
                        new
                        {
                            StateId = 10,
                            CountryId = 1,
                            Name = "Maranhão"
                        },
                        new
                        {
                            StateId = 11,
                            CountryId = 1,
                            Name = "Mato Grosso"
                        },
                        new
                        {
                            StateId = 12,
                            CountryId = 1,
                            Name = "Mato Grosso do Sul"
                        },
                        new
                        {
                            StateId = 13,
                            CountryId = 1,
                            Name = "Minas Gerais"
                        },
                        new
                        {
                            StateId = 14,
                            CountryId = 1,
                            Name = "Pará"
                        },
                        new
                        {
                            StateId = 15,
                            CountryId = 1,
                            Name = "Paraíba"
                        },
                        new
                        {
                            StateId = 16,
                            CountryId = 1,
                            Name = "Paraná"
                        },
                        new
                        {
                            StateId = 17,
                            CountryId = 1,
                            Name = "Pernambuco"
                        },
                        new
                        {
                            StateId = 18,
                            CountryId = 1,
                            Name = "Piauí"
                        },
                        new
                        {
                            StateId = 19,
                            CountryId = 1,
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            StateId = 20,
                            CountryId = 1,
                            Name = "Rio Grande do Norte"
                        },
                        new
                        {
                            StateId = 21,
                            CountryId = 1,
                            Name = "Rio Grande do Sul"
                        },
                        new
                        {
                            StateId = 22,
                            CountryId = 1,
                            Name = "Rondônia"
                        },
                        new
                        {
                            StateId = 23,
                            CountryId = 1,
                            Name = "Roraima"
                        },
                        new
                        {
                            StateId = 24,
                            CountryId = 1,
                            Name = "Santa Catarina"
                        },
                        new
                        {
                            StateId = 25,
                            CountryId = 1,
                            Name = "São Paulo"
                        },
                        new
                        {
                            StateId = 26,
                            CountryId = 1,
                            Name = "Sergipe"
                        },
                        new
                        {
                            StateId = 27,
                            CountryId = 1,
                            Name = "Tocantins"
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreetId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("NeighbourhoodId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("StreetId");

                    b.HasIndex("NeighbourhoodId");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("GeoGuardian.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Created = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@geo.com",
                            FullName = "Admin",
                            Password = "Admingeo",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.UserAlert", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("AlertId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("ConfirmedReception")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("SendMode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "AlertId");

                    b.HasIndex("AlertId");

                    b.ToTable("UserAlerts");
                });

            modelBuilder.Entity("GeoGuardian.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            Name = "ADMIN"
                        },
                        new
                        {
                            UserTypeId = 2,
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("GeoGuardian.Entities.Address", b =>
                {
                    b.HasOne("GeoGuardian.Entities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId1");

                    b.HasOne("GeoGuardian.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId1");

                    b.HasOne("GeoGuardian.Entities.State", null)
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId1");

                    b.HasOne("GeoGuardian.Entities.Street", null)
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId");

                    b.HasOne("GeoGuardian.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Alert", b =>
                {
                    b.HasOne("GeoGuardian.Entities.AlertType", "AlertType")
                        .WithMany("Alerts")
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.RiskArea", "RiskArea")
                        .WithMany("Alerts")
                        .HasForeignKey("RiskAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertType");

                    b.Navigation("RiskArea");
                });

            modelBuilder.Entity("GeoGuardian.Entities.City", b =>
                {
                    b.HasOne("GeoGuardian.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Neighbourhood", b =>
                {
                    b.HasOne("GeoGuardian.Entities.City", "City")
                        .WithMany("Neighbourhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("GeoGuardian.Entities.RiskArea", b =>
                {
                    b.HasOne("GeoGuardian.Entities.City", "City")
                        .WithMany("RiskAreas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.RiskAreaType", "RiskAreaType")
                        .WithMany("RiskAreas")
                        .HasForeignKey("RiskAreaTypeId");

                    b.HasOne("GeoGuardian.Entities.Street", null)
                        .WithMany("RiskAreas")
                        .HasForeignKey("StreetId");

                    b.Navigation("City");

                    b.Navigation("RiskAreaType");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Sensor", b =>
                {
                    b.HasOne("GeoGuardian.Entities.RiskArea", "RiskArea")
                        .WithMany("Sensors")
                        .HasForeignKey("RiskAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.SensorModel", "SensorModel")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskArea");

                    b.Navigation("SensorModel");
                });

            modelBuilder.Entity("GeoGuardian.Entities.SensorReading", b =>
                {
                    b.HasOne("GeoGuardian.Entities.Sensor", "Sensor")
                        .WithMany("Readings")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("GeoGuardian.Entities.State", b =>
                {
                    b.HasOne("GeoGuardian.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Street", b =>
                {
                    b.HasOne("GeoGuardian.Entities.Neighbourhood", "Neighbourhood")
                        .WithMany("Streets")
                        .HasForeignKey("NeighbourhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighbourhood");
                });

            modelBuilder.Entity("GeoGuardian.Entities.User", b =>
                {
                    b.HasOne("GeoGuardian.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("GeoGuardian.Entities.UserAlert", b =>
                {
                    b.HasOne("GeoGuardian.Entities.Alert", "Alert")
                        .WithMany("UserAlerts")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGuardian.Entities.User", "User")
                        .WithMany("UserAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Alert", b =>
                {
                    b.Navigation("UserAlerts");
                });

            modelBuilder.Entity("GeoGuardian.Entities.AlertType", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("GeoGuardian.Entities.City", b =>
                {
                    b.Navigation("Neighbourhoods");

                    b.Navigation("RiskAreas");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("States");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Neighbourhood", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("GeoGuardian.Entities.RiskArea", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("GeoGuardian.Entities.RiskAreaType", b =>
                {
                    b.Navigation("RiskAreas");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Sensor", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("GeoGuardian.Entities.SensorModel", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("GeoGuardian.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GeoGuardian.Entities.Street", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("RiskAreas");
                });

            modelBuilder.Entity("GeoGuardian.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("UserAlerts");
                });

            modelBuilder.Entity("GeoGuardian.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
